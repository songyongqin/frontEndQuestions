es6引入两个新的语言特性：迭代器与生成器

  1.迭代器是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现iterable接口的对象都有一个Symbol.iterator属性，这个属性
  引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现iterator接口的对象。
  2.迭代器必须通过连续调用next()方法才能取得值，这个方法返回一个IteratorObject。这个对象包含一个done属性和一个value属性。前者是一个布尔值，
  表示是否还更多值可以访问；后者包含迭代器返回的当前值。这个接口可以通过手动反复调用next()方法来消费，也可以通过原生消费者,比如for-of循环来自动消费。
  3.生成器是一种特殊的函数，调用之后会返回一个生成器对象。生成器对象实现了Iterable接口，因此可用在任何消费可迭代对象的地方。生成器的独特之处在于支持yield关键字，这个关键字
  能够暂停执行生成器函数，使用yield关键字还可以通过next()方法接收输入和产生输出。在加上星号之后，yield关键字可以将跟在它后面的可迭代对象序列化为一连串值。